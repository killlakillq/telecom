version: '3.8'

services:
  asterisk:
    build:
      context: ./asterisk
      dockerfile: Dockerfile
    ports:
      - "5060:5060/udp"  # SIP
      - "5060:5060/tcp"  # SIP
      - "5038:5038"      # AMI
    volumes:
      - ./asterisk/config:/etc/asterisk
      - ./asterisk/logs:/var/log/asterisk
    environment:
      - ASTERISK_AMI_USERNAME=${ASTERISK_AMI_USERNAME}
      - ASTERISK_AMI_PASSWORD=${ASTERISK_AMI_PASSWORD}
    networks:
      - telecom-network

  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "5672:5672"   # AMQP
      - "15672:15672" # Management UI
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USERNAME}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASSWORD}
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    networks:
      - telecom-network

  postgres:
    image: timescale/timescaledb:latest-pg14
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - telecom-network

  event-processor:
    build:
      context: ./apps/event-processor
      dockerfile: Dockerfile
    depends_on:
      - asterisk
      - rabbitmq
    environment:
      - ASTERISK_HOST=asterisk
      - ASTERISK_AMI_PORT=5038
      - ASTERISK_AMI_USERNAME=${ASTERISK_AMI_USERNAME}
      - ASTERISK_AMI_PASSWORD=${ASTERISK_AMI_PASSWORD}
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_USERNAME=${RABBITMQ_USERNAME}
      - RABBITMQ_PASSWORD=${RABBITMQ_PASSWORD}
    volumes:
      - ./apps/event-processor/logs:/app/logs
    networks:
      - telecom-network

  api:
    build:
      context: ./apps/api
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    depends_on:
      - database
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRES_IN=${JWT_EXPIRES_IN}
    volumes:
      - ./apps/api/logs:/app/logs
    networks:
      - telecom-network

volumes:
  postgres-data:
  rabbitmq-data:

networks:
  telecom-network:
    driver: bridge 