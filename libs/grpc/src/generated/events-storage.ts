// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.20.3
// source: events-storage.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "eventsStorage";

export interface GetEventRequest {
  eventId: string;
}

export interface GetEventResponse {
  /**
   * string event_id = 1;
   * string event_type = 2;
   * string event_data = 3;
   * string source = 4;
   * int64 timestamp = 5;
   * bool success = 6;
   * string error = 7;
   */
  eventType: string;
}

export interface GetEventsRequest {
  /**
   * string source = 2;
   * int64 start_timestamp = 3;
   * int64 end_timestamp = 4;
   * int32 limit = 5;
   * int32 offset = 6;
   */
  eventType: string;
}

export interface GetEventsResponse {
  /**
   * int32 total = 2;
   * bool success = 3;
   * string error = 4;
   */
  eventType: string;
}

export interface Event {
  eventId: string;
  eventType: string;
  eventData: string;
  source: string;
  timestamp: string;
}

function createBaseGetEventRequest(): GetEventRequest {
  return { eventId: "" };
}

export const GetEventRequest: MessageFns<GetEventRequest> = {
  encode(message: GetEventRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.eventId !== "") {
      writer.uint32(10).string(message.eventId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetEventRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetEventRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.eventId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetEventRequest {
    return { eventId: isSet(object.eventId) ? globalThis.String(object.eventId) : "" };
  },

  toJSON(message: GetEventRequest): unknown {
    const obj: any = {};
    if (message.eventId !== "") {
      obj.eventId = message.eventId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetEventRequest>, I>>(base?: I): GetEventRequest {
    return GetEventRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetEventRequest>, I>>(object: I): GetEventRequest {
    const message = createBaseGetEventRequest();
    message.eventId = object.eventId ?? "";
    return message;
  },
};

function createBaseGetEventResponse(): GetEventResponse {
  return { eventType: "" };
}

export const GetEventResponse: MessageFns<GetEventResponse> = {
  encode(message: GetEventResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.eventType !== "") {
      writer.uint32(10).string(message.eventType);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetEventResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetEventResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.eventType = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetEventResponse {
    return { eventType: isSet(object.eventType) ? globalThis.String(object.eventType) : "" };
  },

  toJSON(message: GetEventResponse): unknown {
    const obj: any = {};
    if (message.eventType !== "") {
      obj.eventType = message.eventType;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetEventResponse>, I>>(base?: I): GetEventResponse {
    return GetEventResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetEventResponse>, I>>(object: I): GetEventResponse {
    const message = createBaseGetEventResponse();
    message.eventType = object.eventType ?? "";
    return message;
  },
};

function createBaseGetEventsRequest(): GetEventsRequest {
  return { eventType: "" };
}

export const GetEventsRequest: MessageFns<GetEventsRequest> = {
  encode(message: GetEventsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.eventType !== "") {
      writer.uint32(10).string(message.eventType);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetEventsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetEventsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.eventType = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetEventsRequest {
    return { eventType: isSet(object.eventType) ? globalThis.String(object.eventType) : "" };
  },

  toJSON(message: GetEventsRequest): unknown {
    const obj: any = {};
    if (message.eventType !== "") {
      obj.eventType = message.eventType;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetEventsRequest>, I>>(base?: I): GetEventsRequest {
    return GetEventsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetEventsRequest>, I>>(object: I): GetEventsRequest {
    const message = createBaseGetEventsRequest();
    message.eventType = object.eventType ?? "";
    return message;
  },
};

function createBaseGetEventsResponse(): GetEventsResponse {
  return { eventType: "" };
}

export const GetEventsResponse: MessageFns<GetEventsResponse> = {
  encode(message: GetEventsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.eventType !== "") {
      writer.uint32(10).string(message.eventType);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetEventsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetEventsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.eventType = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetEventsResponse {
    return { eventType: isSet(object.eventType) ? globalThis.String(object.eventType) : "" };
  },

  toJSON(message: GetEventsResponse): unknown {
    const obj: any = {};
    if (message.eventType !== "") {
      obj.eventType = message.eventType;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetEventsResponse>, I>>(base?: I): GetEventsResponse {
    return GetEventsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetEventsResponse>, I>>(object: I): GetEventsResponse {
    const message = createBaseGetEventsResponse();
    message.eventType = object.eventType ?? "";
    return message;
  },
};

function createBaseEvent(): Event {
  return { eventId: "", eventType: "", eventData: "", source: "", timestamp: "0" };
}

export const Event: MessageFns<Event> = {
  encode(message: Event, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.eventId !== "") {
      writer.uint32(10).string(message.eventId);
    }
    if (message.eventType !== "") {
      writer.uint32(18).string(message.eventType);
    }
    if (message.eventData !== "") {
      writer.uint32(26).string(message.eventData);
    }
    if (message.source !== "") {
      writer.uint32(34).string(message.source);
    }
    if (message.timestamp !== "0") {
      writer.uint32(40).int64(message.timestamp);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Event {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.eventId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.eventType = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.eventData = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.source = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.timestamp = reader.int64().toString();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Event {
    return {
      eventId: isSet(object.eventId) ? globalThis.String(object.eventId) : "",
      eventType: isSet(object.eventType) ? globalThis.String(object.eventType) : "",
      eventData: isSet(object.eventData) ? globalThis.String(object.eventData) : "",
      source: isSet(object.source) ? globalThis.String(object.source) : "",
      timestamp: isSet(object.timestamp) ? globalThis.String(object.timestamp) : "0",
    };
  },

  toJSON(message: Event): unknown {
    const obj: any = {};
    if (message.eventId !== "") {
      obj.eventId = message.eventId;
    }
    if (message.eventType !== "") {
      obj.eventType = message.eventType;
    }
    if (message.eventData !== "") {
      obj.eventData = message.eventData;
    }
    if (message.source !== "") {
      obj.source = message.source;
    }
    if (message.timestamp !== "0") {
      obj.timestamp = message.timestamp;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Event>, I>>(base?: I): Event {
    return Event.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Event>, I>>(object: I): Event {
    const message = createBaseEvent();
    message.eventId = object.eventId ?? "";
    message.eventType = object.eventType ?? "";
    message.eventData = object.eventData ?? "";
    message.source = object.source ?? "";
    message.timestamp = object.timestamp ?? "0";
    return message;
  },
};

export interface EventsStorage {
  getEvent(request: GetEventRequest): Promise<GetEventResponse>;
  getEvents(request: GetEventsRequest): Promise<GetEventsResponse>;
}

export const EventsStorageServiceName = "eventsStorage.EventsStorage";
export class EventsStorageClientImpl implements EventsStorage {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || EventsStorageServiceName;
    this.rpc = rpc;
    this.getEvent = this.getEvent.bind(this);
    this.getEvents = this.getEvents.bind(this);
  }
  getEvent(request: GetEventRequest): Promise<GetEventResponse> {
    const data = GetEventRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "getEvent", data);
    return promise.then((data) => GetEventResponse.decode(new BinaryReader(data)));
  }

  getEvents(request: GetEventsRequest): Promise<GetEventsResponse> {
    const data = GetEventsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "getEvents", data);
    return promise.then((data) => GetEventsResponse.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
